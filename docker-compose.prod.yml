services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: taskdb
    restart: unless-stopped
    environment:
      POSTGRES_DB: taskdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - task-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d taskdb"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flask Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: task-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-PASSWORD}@db:5432/taskdb
      FLASK_ENV: production
    ports:
      - "5000:5000"  # Expose backend port for debugging
    depends_on:
      db:
        condition: service_healthy
    networks:
      - task-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/tasks"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Nginx Server with SSL-ready configuration
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: task-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - task-network
    volumes:
      # Mount SSL certificates if available
      - ./ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

# Named volumes
volumes:
  postgres_data:
    driver: local

# Networks
networks:
  task-network:
    driver: bridge
